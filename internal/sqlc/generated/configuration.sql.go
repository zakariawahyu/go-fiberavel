// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: configuration.sql

package sqlc

import (
	"context"
)

const getConfigurationByType = `-- name: GetConfigurationByType :one
SELECT id, type, title, description, image, image_caption, custom_data->'custom_data' as custom_data, is_active FROM configurations WHERE type = $1
`

type GetConfigurationByTypeRow struct {
	ID           int64       `json:"id"`
	Type         string      `json:"type"`
	Title        string      `json:"title"`
	Description  string      `json:"description"`
	Image        *string     `json:"image"`
	ImageCaption *string     `json:"image_caption"`
	CustomData   interface{} `json:"custom_data"`
	IsActive     *bool       `json:"is_active"`
}

func (q *Queries) GetConfigurationByType(ctx context.Context, type_ string) (GetConfigurationByTypeRow, error) {
	row := q.db.QueryRow(ctx, getConfigurationByType, type_)
	var i GetConfigurationByTypeRow
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Title,
		&i.Description,
		&i.Image,
		&i.ImageCaption,
		&i.CustomData,
		&i.IsActive,
	)
	return i, err
}

const updateConfigurationCover = `-- name: UpdateConfigurationCover :exec
INSERT INTO configurations (type, title, description, custom_data, updated_at)
VALUES ($1, $2, $3, $4, NOW())
ON CONFLICT (type) DO UPDATE
SET
        title = EXCLUDED.title,
        description = EXCLUDED.description,
        custom_data = EXCLUDED.custom_data,
        updated_at = NOW()
`

type UpdateConfigurationCoverParams struct {
	Type        string `json:"type"`
	Title       string `json:"title"`
	Description string `json:"description"`
	CustomData  []byte `json:"custom_data"`
}

func (q *Queries) UpdateConfigurationCover(ctx context.Context, arg UpdateConfigurationCoverParams) error {
	_, err := q.db.Exec(ctx, updateConfigurationCover,
		arg.Type,
		arg.Title,
		arg.Description,
		arg.CustomData,
	)
	return err
}

const updateConfigurationGift = `-- name: UpdateConfigurationGift :exec
INSERT INTO configurations (type, title, description, updated_at)
VALUES ($1, $2, $3, NOW())
ON CONFLICT (type) DO UPDATE
SET
        title = EXCLUDED.title,
        description = EXCLUDED.description,
        updated_at = NOW()
`

type UpdateConfigurationGiftParams struct {
	Type        string `json:"type"`
	Title       string `json:"title"`
	Description string `json:"description"`
}

func (q *Queries) UpdateConfigurationGift(ctx context.Context, arg UpdateConfigurationGiftParams) error {
	_, err := q.db.Exec(ctx, updateConfigurationGift, arg.Type, arg.Title, arg.Description)
	return err
}

const updateConfigurationVenue = `-- name: UpdateConfigurationVenue :exec
INSERT INTO configurations (type, title, description, updated_at)
VALUES ($1, $2, $3, NOW())
ON CONFLICT (type) DO UPDATE
SET
        title = EXCLUDED.title,
        description = EXCLUDED.description,
        updated_at = NOW()
`

type UpdateConfigurationVenueParams struct {
	Type        string `json:"type"`
	Title       string `json:"title"`
	Description string `json:"description"`
}

func (q *Queries) UpdateConfigurationVenue(ctx context.Context, arg UpdateConfigurationVenueParams) error {
	_, err := q.db.Exec(ctx, updateConfigurationVenue, arg.Type, arg.Title, arg.Description)
	return err
}

const updateConfigurationWish = `-- name: UpdateConfigurationWish :exec
INSERT INTO configurations (type, title, description, updated_at)
VALUES ($1, $2, $3, NOW())
ON CONFLICT (type) DO UPDATE
SET
        title = EXCLUDED.title,
        description = EXCLUDED.description,
        updated_at = NOW()
`

type UpdateConfigurationWishParams struct {
	Type        string `json:"type"`
	Title       string `json:"title"`
	Description string `json:"description"`
}

func (q *Queries) UpdateConfigurationWish(ctx context.Context, arg UpdateConfigurationWishParams) error {
	_, err := q.db.Exec(ctx, updateConfigurationWish, arg.Type, arg.Title, arg.Description)
	return err
}
