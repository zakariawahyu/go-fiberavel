// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: wish.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countWish = `-- name: CountWish :one
SELECT COUNT(id)
FROM wishes
WHERE (name ILIKE '%' || $1::text || '%' OR wish_description ILIKE '%' || $1::text || '%') AND deleted_at IS NULL
`

func (q *Queries) CountWish(ctx context.Context, dollar_1 string) (int64, error) {
	row := q.db.QueryRow(ctx, countWish, dollar_1)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createWish = `-- name: CreateWish :one
INSERT INTO wishes (
    name, wish_description
) VALUES (
             $1, $2
         )
    RETURNING id, name, wish_description, created_at, updated_at, deleted_at
`

type CreateWishParams struct {
	Name            string `json:"name"`
	WishDescription string `json:"wish_description"`
}

func (q *Queries) CreateWish(ctx context.Context, arg CreateWishParams) (Wish, error) {
	row := q.db.QueryRow(ctx, createWish, arg.Name, arg.WishDescription)
	var i Wish
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.WishDescription,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const datatablesWish = `-- name: DatatablesWish :many
SELECT id, name, wish_description
FROM wishes
WHERE (name ILIKE '%' || $1::text || '%' OR wish_description ILIKE '%' || $1::text || '%') AND deleted_at IS NULL
ORDER BY (case when $2 = 'name' and $3 = 'asc' then name end) ASC,
         (case when $2 = 'name' and $3 = 'desc' then name end) DESC,
         (case when $2 = 'wish_description' and $3 = 'asc' then wish_description end) ASC,
         (case when $2 = 'wish_description' and $3 = 'desc' then wish_description end) DESC,
         (case when $2 = '' then created_at end) DESC
LIMIT $4 OFFSET $5
`

type DatatablesWishParams struct {
	Column1 string      `json:"column_1"`
	Column2 interface{} `json:"column_2"`
	Column3 interface{} `json:"column_3"`
	Limit   int32       `json:"limit"`
	Offset  int32       `json:"offset"`
}

type DatatablesWishRow struct {
	ID              int64  `json:"id"`
	Name            string `json:"name"`
	WishDescription string `json:"wish_description"`
}

func (q *Queries) DatatablesWish(ctx context.Context, arg DatatablesWishParams) ([]DatatablesWishRow, error) {
	rows, err := q.db.Query(ctx, datatablesWish,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DatatablesWishRow
	for rows.Next() {
		var i DatatablesWishRow
		if err := rows.Scan(&i.ID, &i.Name, &i.WishDescription); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteWish = `-- name: DeleteWish :exec
UPDATE wishes SET deleted_at = NOW() WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) DeleteWish(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteWish, id)
	return err
}

const getAllWish = `-- name: GetAllWish :many
SELECT id, name, wish_description, created_at FROM wishes WHERE deleted_at IS NULL ORDER BY created_at DESC
`

type GetAllWishRow struct {
	ID              int64            `json:"id"`
	Name            string           `json:"name"`
	WishDescription string           `json:"wish_description"`
	CreatedAt       pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) GetAllWish(ctx context.Context) ([]GetAllWishRow, error) {
	rows, err := q.db.Query(ctx, getAllWish)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllWishRow
	for rows.Next() {
		var i GetAllWishRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.WishDescription,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWish = `-- name: GetWish :one
SELECT id, name, wish_description, created_at FROM wishes WHERE id = $1 AND deleted_at IS NULL LIMIT 1
`

type GetWishRow struct {
	ID              int64            `json:"id"`
	Name            string           `json:"name"`
	WishDescription string           `json:"wish_description"`
	CreatedAt       pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) GetWish(ctx context.Context, id int64) (GetWishRow, error) {
	row := q.db.QueryRow(ctx, getWish, id)
	var i GetWishRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.WishDescription,
		&i.CreatedAt,
	)
	return i, err
}
