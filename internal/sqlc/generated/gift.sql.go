// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: gift.sql

package sqlc

import (
	"context"
)

const countGift = `-- name: CountGift :one
SELECT COUNT(id)
FROM gifts
WHERE (bank ILIKE '%' || $1::text || '%' OR account_name ILIKE '%' || $1::text || '%') AND deleted_at IS NULL
`

func (q *Queries) CountGift(ctx context.Context, dollar_1 string) (int64, error) {
	row := q.db.QueryRow(ctx, countGift, dollar_1)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createGift = `-- name: CreateGift :one
INSERT INTO gifts (
    bank, account_name, account_number
) VALUES (
             $1, $2, $3
         )
    RETURNING id, bank, account_name, account_number, created_at, updated_at, deleted_at
`

type CreateGiftParams struct {
	Bank          string `json:"bank"`
	AccountName   string `json:"account_name"`
	AccountNumber string `json:"account_number"`
}

func (q *Queries) CreateGift(ctx context.Context, arg CreateGiftParams) (Gift, error) {
	row := q.db.QueryRow(ctx, createGift, arg.Bank, arg.AccountName, arg.AccountNumber)
	var i Gift
	err := row.Scan(
		&i.ID,
		&i.Bank,
		&i.AccountName,
		&i.AccountNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const datatablesGift = `-- name: DatatablesGift :many
SELECT id, bank, account_name, account_number
FROM gifts
WHERE (bank ILIKE '%' || $1::text || '%' OR account_name ILIKE '%' || $1::text || '%') AND deleted_at IS NULL
ORDER BY (case when $2 = 'bank' and $3 = 'asc' then bank end) ASC,
         (case when $2 = 'bank' and $3 = 'desc' then bank end) DESC,
         (case when $2 = 'account_name' and $3 = 'asc' then account_name end) ASC,
         (case when $2 = 'account_name' and $3 = 'desc' then account_name end) DESC,
         (case when $2 = '' then created_at end) DESC
LIMIT $4 OFFSET $5
`

type DatatablesGiftParams struct {
	Column1 string      `json:"column_1"`
	Column2 interface{} `json:"column_2"`
	Column3 interface{} `json:"column_3"`
	Limit   int32       `json:"limit"`
	Offset  int32       `json:"offset"`
}

type DatatablesGiftRow struct {
	ID            int64  `json:"id"`
	Bank          string `json:"bank"`
	AccountName   string `json:"account_name"`
	AccountNumber string `json:"account_number"`
}

func (q *Queries) DatatablesGift(ctx context.Context, arg DatatablesGiftParams) ([]DatatablesGiftRow, error) {
	rows, err := q.db.Query(ctx, datatablesGift,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DatatablesGiftRow
	for rows.Next() {
		var i DatatablesGiftRow
		if err := rows.Scan(
			&i.ID,
			&i.Bank,
			&i.AccountName,
			&i.AccountNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteGift = `-- name: DeleteGift :exec
UPDATE gifts SET deleted_at = NOW() WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) DeleteGift(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteGift, id)
	return err
}

const getAllGift = `-- name: GetAllGift :many
SELECT id, bank, account_name, account_number FROM gifts WHERE deleted_at IS NULL
`

type GetAllGiftRow struct {
	ID            int64  `json:"id"`
	Bank          string `json:"bank"`
	AccountName   string `json:"account_name"`
	AccountNumber string `json:"account_number"`
}

func (q *Queries) GetAllGift(ctx context.Context) ([]GetAllGiftRow, error) {
	rows, err := q.db.Query(ctx, getAllGift)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllGiftRow
	for rows.Next() {
		var i GetAllGiftRow
		if err := rows.Scan(
			&i.ID,
			&i.Bank,
			&i.AccountName,
			&i.AccountNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGift = `-- name: GetGift :one
SELECT id, bank, account_name, account_number FROM gifts WHERE id = $1 AND deleted_at IS NULL LIMIT 1
`

type GetGiftRow struct {
	ID            int64  `json:"id"`
	Bank          string `json:"bank"`
	AccountName   string `json:"account_name"`
	AccountNumber string `json:"account_number"`
}

func (q *Queries) GetGift(ctx context.Context, id int64) (GetGiftRow, error) {
	row := q.db.QueryRow(ctx, getGift, id)
	var i GetGiftRow
	err := row.Scan(
		&i.ID,
		&i.Bank,
		&i.AccountName,
		&i.AccountNumber,
	)
	return i, err
}

const updateGift = `-- name: UpdateGift :exec
UPDATE gifts SET
    updated_at = NOW(),
    bank = $2,
    account_name = $3,
    account_number = $4
WHERE id = $1 AND deleted_at IS NULL
`

type UpdateGiftParams struct {
	ID            int64  `json:"id"`
	Bank          string `json:"bank"`
	AccountName   string `json:"account_name"`
	AccountNumber string `json:"account_number"`
}

func (q *Queries) UpdateGift(ctx context.Context, arg UpdateGiftParams) error {
	_, err := q.db.Exec(ctx, updateGift,
		arg.ID,
		arg.Bank,
		arg.AccountName,
		arg.AccountNumber,
	)
	return err
}
