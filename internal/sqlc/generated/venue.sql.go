// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: venue.sql

package sqlc

import (
	"context"
)

const countVenue = `-- name: CountVenue :one
SELECT COUNT(id)
FROM venues
WHERE (name ILIKE '%' || $1::text || '%' OR location ILIKE '%' || $1::text || '%' OR date_held ILIKE '%' || $1::text || '%') AND deleted_at IS NULL
`

func (q *Queries) CountVenue(ctx context.Context, dollar_1 string) (int64, error) {
	row := q.db.QueryRow(ctx, countVenue, dollar_1)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createVenue = `-- name: CreateVenue :one
INSERT INTO venues (
    name, location, address, date_held, map
) VALUES (
             $1, $2, $3, $4, $5
         )
    RETURNING id, name, location, address, date_held, map, created_at, updated_at, deleted_at
`

type CreateVenueParams struct {
	Name     string `json:"name"`
	Location string `json:"location"`
	Address  string `json:"address"`
	DateHeld string `json:"date_held"`
	Map      string `json:"map"`
}

func (q *Queries) CreateVenue(ctx context.Context, arg CreateVenueParams) (Venue, error) {
	row := q.db.QueryRow(ctx, createVenue,
		arg.Name,
		arg.Location,
		arg.Address,
		arg.DateHeld,
		arg.Map,
	)
	var i Venue
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Location,
		&i.Address,
		&i.DateHeld,
		&i.Map,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const datatablesVenue = `-- name: DatatablesVenue :many
SELECT id, name, location, date_held
FROM venues
WHERE (name ILIKE '%' || $1::text || '%' OR location ILIKE '%' || $1::text || '%' OR date_held ILIKE '%' || $1::text || '%') AND deleted_at IS NULL
ORDER BY (case when $2 = 'name' and $3 = 'asc' then name end) ASC,
         (case when $2 = 'name' and $3 = 'desc' then name end) DESC,
         (case when $2 = 'location' and $3 = 'asc' then location end) ASC,
         (case when $2 = 'location' and $3 = 'desc' then location end) DESC,
         (case when $2 = 'date_held' and $3 = 'asc' then date_held end) ASC,
         (case when $2 = 'date_held' and $3 = 'desc' then date_held end) DESC,
         (case when $2 = '' then created_at end) DESC
LIMIT $4 OFFSET $5
`

type DatatablesVenueParams struct {
	Column1 string      `json:"column_1"`
	Column2 interface{} `json:"column_2"`
	Column3 interface{} `json:"column_3"`
	Limit   int32       `json:"limit"`
	Offset  int32       `json:"offset"`
}

type DatatablesVenueRow struct {
	ID       int64  `json:"id"`
	Name     string `json:"name"`
	Location string `json:"location"`
	DateHeld string `json:"date_held"`
}

func (q *Queries) DatatablesVenue(ctx context.Context, arg DatatablesVenueParams) ([]DatatablesVenueRow, error) {
	rows, err := q.db.Query(ctx, datatablesVenue,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DatatablesVenueRow
	for rows.Next() {
		var i DatatablesVenueRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Location,
			&i.DateHeld,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteVenue = `-- name: DeleteVenue :exec
UPDATE venues SET deleted_at = NOW() WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) DeleteVenue(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteVenue, id)
	return err
}

const getAllVenue = `-- name: GetAllVenue :many
SELECT id, name, location, address, date_held, map FROM venues WHERE deleted_at IS NULL
`

type GetAllVenueRow struct {
	ID       int64  `json:"id"`
	Name     string `json:"name"`
	Location string `json:"location"`
	Address  string `json:"address"`
	DateHeld string `json:"date_held"`
	Map      string `json:"map"`
}

func (q *Queries) GetAllVenue(ctx context.Context) ([]GetAllVenueRow, error) {
	rows, err := q.db.Query(ctx, getAllVenue)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllVenueRow
	for rows.Next() {
		var i GetAllVenueRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Location,
			&i.Address,
			&i.DateHeld,
			&i.Map,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVenue = `-- name: GetVenue :one
SELECT id, name, location, address, date_held, map FROM venues WHERE id = $1 AND deleted_at IS NULL LIMIT 1
`

type GetVenueRow struct {
	ID       int64  `json:"id"`
	Name     string `json:"name"`
	Location string `json:"location"`
	Address  string `json:"address"`
	DateHeld string `json:"date_held"`
	Map      string `json:"map"`
}

func (q *Queries) GetVenue(ctx context.Context, id int64) (GetVenueRow, error) {
	row := q.db.QueryRow(ctx, getVenue, id)
	var i GetVenueRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Location,
		&i.Address,
		&i.DateHeld,
		&i.Map,
	)
	return i, err
}

const updateVenue = `-- name: UpdateVenue :exec
UPDATE venues SET
    updated_at = NOW(),
    name = $2,
    location = $3,
    address = $4,
    date_held = $5,
    map = $6
WHERE id = $1 AND deleted_at IS NULL
`

type UpdateVenueParams struct {
	ID       int64  `json:"id"`
	Name     string `json:"name"`
	Location string `json:"location"`
	Address  string `json:"address"`
	DateHeld string `json:"date_held"`
	Map      string `json:"map"`
}

func (q *Queries) UpdateVenue(ctx context.Context, arg UpdateVenueParams) error {
	_, err := q.db.Exec(ctx, updateVenue,
		arg.ID,
		arg.Name,
		arg.Location,
		arg.Address,
		arg.DateHeld,
		arg.Map,
	)
	return err
}
