// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: gallery.sql

package sqlc

import (
	"context"
)

const countGallery = `-- name: CountGallery :one
SELECT COUNT(id)
FROM galleries
WHERE (image_caption ILIKE '%' || $1::text || '%') AND deleted_at IS NULL
`

func (q *Queries) CountGallery(ctx context.Context, dollar_1 string) (int64, error) {
	row := q.db.QueryRow(ctx, countGallery, dollar_1)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createGallery = `-- name: CreateGallery :one
INSERT INTO galleries (
    image, image_caption
) VALUES (
             $1, $2
         )
    RETURNING id, image, image_caption, created_at, updated_at, deleted_at
`

type CreateGalleryParams struct {
	Image        *string `json:"image"`
	ImageCaption string  `json:"image_caption"`
}

func (q *Queries) CreateGallery(ctx context.Context, arg CreateGalleryParams) (Gallery, error) {
	row := q.db.QueryRow(ctx, createGallery, arg.Image, arg.ImageCaption)
	var i Gallery
	err := row.Scan(
		&i.ID,
		&i.Image,
		&i.ImageCaption,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const datatablesGallery = `-- name: DatatablesGallery :many
SELECT id, image, image_caption
FROM galleries
WHERE (image_caption ILIKE '%' || $1::text || '%') AND deleted_at IS NULL
ORDER BY (case when $2 = 'image_caption' and $3 = 'asc' then image_caption end) ASC,
         (case when $2 = 'image_caption' and $3 = 'desc' then image_caption end) DESC,
         (case when $2 = '' then created_at end) DESC
LIMIT $4 OFFSET $5
`

type DatatablesGalleryParams struct {
	Column1 string      `json:"column_1"`
	Column2 interface{} `json:"column_2"`
	Column3 interface{} `json:"column_3"`
	Limit   int32       `json:"limit"`
	Offset  int32       `json:"offset"`
}

type DatatablesGalleryRow struct {
	ID           int64   `json:"id"`
	Image        *string `json:"image"`
	ImageCaption string  `json:"image_caption"`
}

func (q *Queries) DatatablesGallery(ctx context.Context, arg DatatablesGalleryParams) ([]DatatablesGalleryRow, error) {
	rows, err := q.db.Query(ctx, datatablesGallery,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DatatablesGalleryRow
	for rows.Next() {
		var i DatatablesGalleryRow
		if err := rows.Scan(&i.ID, &i.Image, &i.ImageCaption); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteGallery = `-- name: DeleteGallery :exec
UPDATE galleries SET deleted_at = NOW() WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) DeleteGallery(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteGallery, id)
	return err
}

const getAllGallery = `-- name: GetAllGallery :many
SELECT id, image, image_caption FROM galleries WHERE deleted_at IS NULL
`

type GetAllGalleryRow struct {
	ID           int64   `json:"id"`
	Image        *string `json:"image"`
	ImageCaption string  `json:"image_caption"`
}

func (q *Queries) GetAllGallery(ctx context.Context) ([]GetAllGalleryRow, error) {
	rows, err := q.db.Query(ctx, getAllGallery)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllGalleryRow
	for rows.Next() {
		var i GetAllGalleryRow
		if err := rows.Scan(&i.ID, &i.Image, &i.ImageCaption); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGallery = `-- name: GetGallery :one
SELECT id, image, image_caption FROM galleries WHERE id = $1 AND deleted_at IS NULL LIMIT 1
`

type GetGalleryRow struct {
	ID           int64   `json:"id"`
	Image        *string `json:"image"`
	ImageCaption string  `json:"image_caption"`
}

func (q *Queries) GetGallery(ctx context.Context, id int64) (GetGalleryRow, error) {
	row := q.db.QueryRow(ctx, getGallery, id)
	var i GetGalleryRow
	err := row.Scan(&i.ID, &i.Image, &i.ImageCaption)
	return i, err
}

const updateGallery = `-- name: UpdateGallery :exec
UPDATE galleries SET
    updated_at = NOW(),
    image = COALESCE($2, image),
    image_caption = $3
WHERE id = $1 AND deleted_at IS NULL
`

type UpdateGalleryParams struct {
	ID           int64   `json:"id"`
	Image        *string `json:"image"`
	ImageCaption string  `json:"image_caption"`
}

func (q *Queries) UpdateGallery(ctx context.Context, arg UpdateGalleryParams) error {
	_, err := q.db.Exec(ctx, updateGallery, arg.ID, arg.Image, arg.ImageCaption)
	return err
}
