// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: couple.sql

package sqlc

import (
	"context"
)

const createCouple = `-- name: CreateCouple :one
INSERT INTO couples (
    couple_type, name, parent_description, father_name, mother_name, image, image_caption, instagram_url
) VALUES (
             $1, $2, $3, $4, $5, $6, $7, $8
         )
    RETURNING id, couple_type, name, parent_description, father_name, mother_name, image, image_caption, instagram_url, created_at, updated_at, deleted_at
`

type CreateCoupleParams struct {
	CoupleType        string `json:"couple_type"`
	Name              string `json:"name"`
	ParentDescription string `json:"parent_description"`
	FatherName        string `json:"father_name"`
	MotherName        string `json:"mother_name"`
	Image             string `json:"image"`
	ImageCaption      string `json:"image_caption"`
	InstagramUrl      string `json:"instagram_url"`
}

func (q *Queries) CreateCouple(ctx context.Context, arg CreateCoupleParams) (Couple, error) {
	row := q.db.QueryRow(ctx, createCouple,
		arg.CoupleType,
		arg.Name,
		arg.ParentDescription,
		arg.FatherName,
		arg.MotherName,
		arg.Image,
		arg.ImageCaption,
		arg.InstagramUrl,
	)
	var i Couple
	err := row.Scan(
		&i.ID,
		&i.CoupleType,
		&i.Name,
		&i.ParentDescription,
		&i.FatherName,
		&i.MotherName,
		&i.Image,
		&i.ImageCaption,
		&i.InstagramUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteCouple = `-- name: DeleteCouple :exec
UPDATE couples SET deleted_at = NOW() WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) DeleteCouple(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteCouple, id)
	return err
}

const getAllCouple = `-- name: GetAllCouple :many
SELECT id, couple_type, name, parent_description, father_name, mother_name, image, image_caption, instagram_url FROM couples WHERE deleted_at IS NULL ORDER BY created_at DESC
`

type GetAllCoupleRow struct {
	ID                int64  `json:"id"`
	CoupleType        string `json:"couple_type"`
	Name              string `json:"name"`
	ParentDescription string `json:"parent_description"`
	FatherName        string `json:"father_name"`
	MotherName        string `json:"mother_name"`
	Image             string `json:"image"`
	ImageCaption      string `json:"image_caption"`
	InstagramUrl      string `json:"instagram_url"`
}

func (q *Queries) GetAllCouple(ctx context.Context) ([]GetAllCoupleRow, error) {
	rows, err := q.db.Query(ctx, getAllCouple)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllCoupleRow
	for rows.Next() {
		var i GetAllCoupleRow
		if err := rows.Scan(
			&i.ID,
			&i.CoupleType,
			&i.Name,
			&i.ParentDescription,
			&i.FatherName,
			&i.MotherName,
			&i.Image,
			&i.ImageCaption,
			&i.InstagramUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCouple = `-- name: GetCouple :one
SELECT id, couple_type, name, parent_description, father_name, mother_name, image, image_caption, instagram_url FROM couples WHERE id = $1 AND deleted_at IS NULL LIMIT 1
`

type GetCoupleRow struct {
	ID                int64  `json:"id"`
	CoupleType        string `json:"couple_type"`
	Name              string `json:"name"`
	ParentDescription string `json:"parent_description"`
	FatherName        string `json:"father_name"`
	MotherName        string `json:"mother_name"`
	Image             string `json:"image"`
	ImageCaption      string `json:"image_caption"`
	InstagramUrl      string `json:"instagram_url"`
}

func (q *Queries) GetCouple(ctx context.Context, id int64) (GetCoupleRow, error) {
	row := q.db.QueryRow(ctx, getCouple, id)
	var i GetCoupleRow
	err := row.Scan(
		&i.ID,
		&i.CoupleType,
		&i.Name,
		&i.ParentDescription,
		&i.FatherName,
		&i.MotherName,
		&i.Image,
		&i.ImageCaption,
		&i.InstagramUrl,
	)
	return i, err
}

const updateCouple = `-- name: UpdateCouple :exec
UPDATE couples SET
    couple_type = $2,
    name = $3,
    parent_description = $4,
    father_name = $5,
    mother_name = $6,
    image = $7,
    image_caption = $8,
    instagram_url = $9
WHERE id = $1 AND deleted_at IS NULL
`

type UpdateCoupleParams struct {
	ID                int64  `json:"id"`
	CoupleType        string `json:"couple_type"`
	Name              string `json:"name"`
	ParentDescription string `json:"parent_description"`
	FatherName        string `json:"father_name"`
	MotherName        string `json:"mother_name"`
	Image             string `json:"image"`
	ImageCaption      string `json:"image_caption"`
	InstagramUrl      string `json:"instagram_url"`
}

func (q *Queries) UpdateCouple(ctx context.Context, arg UpdateCoupleParams) error {
	_, err := q.db.Exec(ctx, updateCouple,
		arg.ID,
		arg.CoupleType,
		arg.Name,
		arg.ParentDescription,
		arg.FatherName,
		arg.MotherName,
		arg.Image,
		arg.ImageCaption,
		arg.InstagramUrl,
	)
	return err
}
